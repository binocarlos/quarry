#!/usr/bin/env bash
set -eo pipefail
export QUARRY_ROOT=${QUARRY_ROOT:="/home/quarry"}
export DATA_ROOT=${QUARRY_ROOT:="/var/lib/quarry/data"}
export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/quarry/plugins"}

[[ -f $QUARRY_ROOT/quarryrc ]] && source $QUARRY_ROOT/quarryrc

[[ $QUARRY_TRACE ]] && set -x

if [[ $(id -un) != "quarry" && $1 != "plugins-install" ]]; then
  sudo -u quarry -H $0 "$@"
  exit
fi

case "$1" in
  receive)
    APP="$2"; IMAGE="app/$APP"
    echo "-----> Cleaning up ..."
    quarry cleanup
    echo "-----> Building $APP ..."
    cat | quarry build $APP
    echo
    ;;

  build)
    APP="$2"; IMAGE="app/$APP"; CACHE_DIR="$QUARRY_ROOT/$APP/cache"
    id=$(cat | docker run -i -a stdin quarry/base /bin/bash -c "mkdir -p /app && tar -xC /app")
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    [[ -d $CACHE_DIR ]] || mkdir $CACHE_DIR
    pluginhook pre-build $APP
    id=$(docker run -d -v $CACHE_DIR:/cache $IMAGE node /opt/quarry/bin/quarry-cli build -d /app)
    docker attach $id
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    pluginhook post-build $APP
    ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    pluginhook install
    ;;

  help)
    cat<<EOF | pluginhook commands help | sort
    help            Print the list of commands
    plugins         Print active plugins
    plugins-install Install active plugins
EOF
    ;;

  *)
    for script in $(ls -d /var/lib/quarry/plugins/*/commands); do
      $script "$@"
    done
    ;;

esac
