#!/usr/bin/env bash
set -eo pipefail
DOCKERIP=$(ifconfig docker0 | grep "inet addr" | sed 's/inet addr://' | awk '{ print $1 }' || "127.0.0.1")
export QUARRY_ROOT=${QUARRY_ROOT:="/home/quarry"}
export QUARRY_HOST=${QUARRY_HOST:=$DOCKERIP}
export QUARRY_MASTER=${QUARRY_MASTER:=$QUARRY_HOST}

[[ -f $QUARRY_ROOT/quarryrc ]] && source $QUARRY_ROOT/quarryrc

[[ $QUARRY_TRACE ]] && set -x

if [[ $(id -un) != "quarry" ]]; then
  sudo -u quarry -H $0 "$@"
  exit
fi

case "$1" in
  receive)
    STACK="$2";
    echo "-----> Cleaning up ..."
    quarry cleanup
    echo "-----> Building $STACK ..."
    cat | quarry build $STACK
    echo "-----> Deploying $STACK ..."
    quarry deploy $STACK
    ;;

  testbuild)
    APP="$2";
    SOURCE_FOLDER=`pwd`
    tar --exclude=.git -c . | quarry receive $APP
    ;;
    
  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  #
  #
  #
  # build
  #
  #
  #

  build)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";

    # reset the build folders
    rm -rf $STACK_DIR/buildtemp && mkdir -p $STACK_DIR/buildtemp
    rm -rf $STACK_DIR/build
    rm -rf $STACK_DIR/src && mkdir -p $STACK_DIR/src

    # incoming tar stream -> /home/quarry/appname/src.tar
    cat | tar -xC $STACK_DIR/src

    echo "build $STACK"
    echo "dir $STACK_DIR"
    
    # compile the stack into a build folder
    docker run -i -v $STACK_DIR/buildtemp:/build -v $STACK_DIR/src:/src quarry/base quarry-cli build $STACK /src /build
    echo "docker run -i -v $STACK_DIR/buildtemp:/build -v $STACK_DIR/src:/src quarry/base quarry-cli build $STACK /src /build"

    # copy the root owned build folder to a quarry owned one
    cp -r $STACK_DIR/buildtemp $STACK_DIR/build

    # run this in a container to get the same permissions to delete (v hackish)
    docker run -i -v $STACK_DIR/buildtemp:/build quarry/base bash -c "rm -rf /build/*"
    rm -rf $STACK_DIR/buildtemp

    # loop over the images and build them
    for imagefolder in $STACK_DIR/build/image/* ; do
      imagename=$(echo $imagefolder | awk -F/ '{print $(NF)}')      

      if [[ -f $imagefolder/dockerfile ]]; then
        imagename=$STACK/$imagename
        cp -f $imagefolder/dockerfile $STACK_DIR/src/Dockerfile
        echo "build image: $imagename"
        cd $STACK_DIR/src && docker build -t $imagename .
        echo $imagename > $imagefolder/container  
      fi
    done

    # loop over the services and build them
    for servicefolder in $STACK_DIR/build/service/* ; do
      servicename=$(echo $servicefolder | awk -F/ '{print $(NF)}')      

      if [[ -f $servicefolder/dockerfile ]]; then
        imagename=$STACK/$servicename
        cp -f $servicefolder/dockerfile $STACK_DIR/src/Dockerfile
        echo "build service: $servicename"
        cd $STACK_DIR/src && docker build -t $imagename .
        echo $imagename > $servicefolder/container  
      fi
    done

    # loop over the workers and build them
    for workerfolder in $STACK_DIR/build/worker/* ; do
      workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')

      if [[ -f $workerfolder/dockerfile ]]; then
        imagename=$STACK/$workername
        cp -f $workerfolder/dockerfile $STACK_DIR/src/Dockerfile
        echo "build worker: $workername"
        cd $STACK_DIR/src && docker build -t $imagename .
        echo $imagename > $workerfolder/container
      fi

      if [[ -f $workerfolder/ssl_cert ]]; then
        cert=`cat $workerfolder/ssl_cert`
        cp $STACK_DIR/src/$cert $workerfolder/ssl_cert
      fi

      if [[ -f $workerfolder/ssl_key ]]; then
        key=`cat $workerfolder/ssl_key`
        cp $STACK_DIR/src/$key $workerfolder/ssl_key
      fi
    done
    
    rm -f $STACK_DIR/src.tar
    rm -rf $STACK_DIR/src
    ;;

  #
  #
  #
  # deploy
  #
  #
  #

  deploy)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    mkdir -p $STACK_DIR/env

    echo "deploy $STACK"

    quarry db:snapshot $STACK

    counter=$(quarry db:counter:inc $STACK)

    quarry deploy:services $STACK
    quarry deploy:workers $STACK $counter

    sleep 2

    nginx-vhost apply
    quarry deploy:cleanup $STACK

    echo
    echo "$STACK deployed"
    echo
    ;;

  deploy:services)

    STACK="$2";
    DEV="$3";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    if [[ -d $BUILD_DIR/service ]]; then
      # loop over the services and build them
      for servicefolder in $BUILD_DIR/service/* ; do
        servicename=$(echo $servicefolder | awk -F/ '{print $(NF)}')
        
        quarry deploy:service $STACK $servicename $DEV
      done
    fi

    ;;

  deploy:workers)

    STACK="$2";
    counter="$3";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    if [[ -d $BUILD_DIR/worker ]]; then
      # loop over the workers and build them
      for workerfolder in $BUILD_DIR/worker/* ; do
        workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')
        
        quarry deploy:worker $STACK $workername "$STACK-$workername-$counter"
      done
    fi

    ;;

  # kill the containers from the old stack
  deploy:cleanup)
    STACK="$2";
    DB_DIR="$QUARRY_ROOT/$STACK/db"

    echo "cleanup $STACK"
    
    if [[ -d "$DB_DIR/previous" ]]; then
      for workerfolder in $DB_DIR/previous/* ; do
        workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')
        if [[ -f $workerfolder/id ]]; then
          id=`cat $workerfolder/id`
          echo "kill $workername $id"
          docker kill $id || true
          if [[ -f "$workerfolder/unhook" ]]; then
            unhook=`cat $BUILD_DIR/unhook`

            echo "---------------------------"
            echo "UNHOOK"
            echo "$unhook"

            # PORTS
            if [[ -f "$BUILD_DIR/expose" ]]; then
              ports=`cat $BUILD_DIR/expose`
              for expose in "${ports[@]}"
              do
                echo "RUN UNHOOK"
                echo "$unhook"
                eval $unhook
              done
            fi
          fi
        fi
      done
      rm -rf $DB_DIR/previous
    fi
    
    ;;

  deploy:worker)
    STACK="$2";
    WORKER="$3";
    NAME="$4"

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/worker/$WORKER";

    args=""
    if [[ -f $BUILD_DIR/args ]]; then
      args=$(cat $BUILD_DIR/args)
    fi

    hook=""
    if [[ -f $BUILD_DIR/hook ]]; then
      hook=$(cat $BUILD_DIR/hook)
    fi

    unhook=""
    if [[ -f $BUILD_DIR/unhook ]]; then
      unhook=$(cat $BUILD_DIR/unhook)
    fi

    NODE="$STACK$WORKER"

    echo
    echo "deploy worker $STACK $WORKER"

    # boot the docker container for the worker
    if [[ -f $BUILD_DIR/container ]]; then
      container=$(cat $BUILD_DIR/container)

      port_opts=$(quarry deploy:port_opts $STACK worker/$WORKER);
      volume_opts=$(quarry deploy:volume_opts $STACK worker/$WORKER);
      env=$(quarry env:docker $STACK)

      echo "running app container"

      echo "docker run -d -t --name $NAME $port_opts $volume_opts $env $container $args"
      echo $cid

      # BOOT WORKER HERE
      cid=$(docker run -d -t --name $NAME $port_opts $volume_opts $env $container $args)

      # write the container
      quarry db:worker:set $STACK $WORKER id $cid
      quarry db:worker:set $STACK $WORKER container $container
      quarry db:worker:set $STACK $WORKER port_opts "$port_opts"
      quarry db:worker:set $STACK $WORKER volume_opts "$volume_opts"
      quarry db:worker:set $STACK $WORKER env "$env"

      echo "$WORKER booted"
      #echo "          $opts"
      #echo "          $env"
    fi

    # hook up the nginx-vhost with the domains
    if [[ -f $BUILD_DIR/domains ]]; then

      domains=`cat $BUILD_DIR/domains`
      quarry db:worker:set $STACK $WORKER domains "$domains"

      echo "    domains $domains"
      nginx-vhost domains $NODE $domains

      # this is a static node
      if [[ -f $BUILD_DIR/document_root ]]; then
        root=`cat $BUILD_DIR/document_root`
        echo "---------------------------------------"
        echo "    document_root $root"
        nginx-vhost document_root $NODE $STACK_DIR/src/$root
      else
        host=$(quarry deploy:worker:gethost $STACK $WORKER)
        port=$(quarry deploy:worker:getport $STACK $WORKER 80)
        echo "---------------------------------------"
        echo "    backends $NODE $host:$port"
        nginx-vhost backends $NODE $host:$port
      fi

      if [[ -f $BUILD_DIR/ssl_cert ]]; then
        nginx-vhost ssl_cert $NODE $BUILD_DIR/ssl_cert
      fi

      if [[ -f $BUILD_DIR/ssl_key ]]; then
        nginx-vhost ssl_key $NODE $BUILD_DIR/ssl_key
      fi
    fi

    # hook up the nginx-vhost with the domains
    if [[ -f $BUILD_DIR/hook ]]; then

      hook=`cat $BUILD_DIR/hook`

      echo "---------------------------"
      echo "HOOK"
      echo "$hook"

      # PORTS
      if [[ -f "$BUILD_DIR/expose" ]]; then
        ports=`cat $BUILD_DIR/expose`
        for expose in "${ports[@]}"
        do
          cid=$(quarry db:worker:get $STACK $WORKER id)
          host=$(quarry deploy:worker:gethost $STACK $WORKER)
          port=$(quarry deploy:worker:getport $STACK $WORKER $expose)
          echo "RUN HOOK"
          echo "$hook"
          eval $hook
        done
      fi


    fi

    echo
    ;;

  deploy:worker:getport)
    STACK="$2"
    WORKER="$3"
    PORT="$4"
    cid=$(quarry db:worker:get $STACK $WORKER id)
    port=$(docker port $cid $PORT | sed 's/^.*\://' || echo)
    echo $port
    ;;

  deploy:worker:gethost)
    STACK="$2"
    WORKER="$3"
    echo $QUARRY_HOST 
    ;;

  deploy:service)
    STACK="$2";
    SERVICE="$3";
    DEV="$4";

    echo
    echo "deploy service $STACK $SERVICE $DEV"

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/service/$SERVICE";

    nodename="$STACK-service-$SERVICE"

    container=""
    if [[ -f $BUILD_DIR/container ]]; then
      container=$(cat $BUILD_DIR/container)
    fi

    args=""
    if [[ -f $BUILD_DIR/args ]]; then
      args=$(cat $BUILD_DIR/args)
    fi

    running=$(docker ps | grep "$nodename" | awk '{ print $1 }' || echo)
    cid=$(quarry db:service:get $STACK $SERVICE id)

    should_boot=""
    service_exists="yes"

    # this means the service is not running
    if [[ -z $running ]]; then

      # this means we have never run it
      if [[ -z $cid ]]; then
        
        should_boot="yes"

      else
        echo "$SERVICE restarting"
        has_container=$(docker ps -a | grep "$cid" | awk '{ print $1 }' || echo)

        if [[ -z $has_container ]]; then
          cid=""
          echo "NO CONTAINER"
          should_boot="yes"
        else
          echo "STARTRING"
          docker start $cid  
        fi
      fi

    # this means the service is already running
    else

      echo "$SERVICE already running" 

    fi


    global=""

    if [[ -f "$BUILD_DIR/global" ]]; then
      globalsetting=$(cat $BUILD_DIR/global)

      # this is the global one we boot it
      if [ "$globalsetting" == "yes" ]; then
        global="yes"
      else
        echo "checking global $globalsetting"
        # check if the global container is running for us
        globalrunning=$(docker ps | grep "$globalsetting" | awk '{ print $1 }' || echo)

        # if it is then don't boot this service
        if [[ ! -z $globalrunning ]]; then
          echo "global service is running"
          should_boot=""
          service_exists=""
        fi
      fi
    fi


    if [[ ! -z $should_boot ]]; then

      if [[ ! -z $running ]]; then
        docker rm $nodename
      fi

      # BOOT SERVICE HERE

      port_opts=$(quarry deploy:port_opts $STACK service/$SERVICE $DEV);
      volume_opts=$(quarry deploy:volume_opts $STACK service/$SERVICE);

      echo "docker run -d -t -name $nodename $port_opts $volume_opts $container $args"
      
      cid=$(docker run -d -t -name $nodename $port_opts $volume_opts $container $args)

      # write the container
      quarry db:service:set $STACK $SERVICE id $cid
      quarry db:service:set $STACK $SERVICE name $nodename
      quarry db:service:set $STACK $SERVICE container $container
      quarry db:service:set $STACK $SERVICE port_opts "$port_opts"
      quarry db:service:set $STACK $SERVICE volume_opts "$volume_opts"

      echo "$SERVICE booted"
    fi

    if [[ ! -z $service_exists ]]; then
      quarry deploy:write_service_env $STACK $SERVICE $global
    fi

    echo
    ;;

  # get the env vars from a service node
  # write them to the stack env
  deploy:write_service_env)
    STACK="$2";
    SERVICE="$3";
    global="$4";
    NAME=$(echo $SERVICE | sed 's/^.*\///' | awk '{print toupper($0)}')

    echo "write env: $SERVICE";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/service/$SERVICE";

    host=$QUARRY_HOST

    cid=$(quarry db:service:get $STACK $SERVICE id)

    # PORTS
    if [[ -f "$BUILD_DIR/expose" ]]; then
      ports=(`cat $BUILD_DIR/expose`)

      for port in "${ports[@]}"
      do
      
        container_port=$(echo $port | sed 's/^.*\://')

        public_port=$(docker port $cid $container_port | sed 's/^.*\://')
        basename="${NAME}_PORT_${container_port}"
        quarry env:writenode $STACK $basename $host $public_port $global

      done
    fi
    ;;

  # generate the docker run options for a node
  # volumes and ports
  deploy:port_opts)
    STACK="$2";
    NODE="$3";
    DEV="$4";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    NODE_DIR="$STACK_DIR/build/$NODE";

    opts=""

    # PORTS
    if [[ -f "$NODE_DIR/expose" ]]; then
      ports=(`cat $NODE_DIR/expose`)
      for port in "${ports[@]}"
      do
        if [[ $port =~ : ]]; then
          port="$QUARRY_HOST:$port"
        else
          port="$QUARRY_HOST::$port"
        fi
        opts="$opts -p $port"
      done
    fi

    echo $opts
    ;;

  deploy:volume_opts)
    STACK="$2";
    NODE="$3";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    VOLUME_DIR="$QUARRY_ROOT/volumes/$STACK/$NODE"
    NODE_DIR="$STACK_DIR/build/$NODE";

    opts=""

    # VOLUMES
    if [[ -f "$NODE_DIR/volumes" ]]; then
      volumes=(`cat $NODE_DIR/volumes`)
      for volume in "${volumes[@]}"
      do
        hostvolume="$VOLUME_DIR$volume";
        mkdir -p $hostvolume
        #echo "volume: $hostvolume:$volume"
        opts="$opts -v $hostvolume:$volume"
      done
    fi

    echo $opts
    ;;


  #
  #
  #
  # db
  #
  #
  #

  # prepare the folders for the db
  db:prepare)
    STACK="$2";
    DB_DIR="$QUARRY_ROOT/$STACK/db"

    mkdir -p $DB_DIR/service
    ;;

  # get the deploy counter
  db:counter)
    STACK="$2";
    DB_DIR="$QUARRY_ROOT/$STACK/db"

    if [[ -f $DB_DIR/counter ]]; then
      counter=$(cat $DB_DIR/counter)
    else
      counter=1
    fi
    echo $counter;
    ;;

  # get the deploy counter
  db:counter:inc)
    STACK="$2";
    DB_DIR="$QUARRY_ROOT/$STACK/db"
    counter=$(quarry db:counter $STACK)
    counter=`expr $counter + 1`
    echo $counter > $DB_DIR/counter
    echo $counter
    ;;

  # copy the current worker folder into the previous folder
  db:snapshot)
    STACK="$2";
    DB_DIR="$QUARRY_ROOT/$STACK/db"

    quarry db:prepare $STACK

    rm -rf $DB_DIR/previous

    if [[ -d $DB_DIR/worker ]]; then
      cp -rf $DB_DIR/worker $DB_DIR/previous
    fi
    ;;

  db:service:list)
    STACK="$2";
    DB_DIR="$QUARRY_ROOT/$STACK/db/service"
    list=""
    for servicefolder in $DB_DIR/* ; do
      servicename=$(echo $servicefolder | awk -F/ '{print $(NF)}')
      list="$list $servicename"
    done
    echo $list
    ;;

  db:service:id)
    STACK="$2";
    SERVICE="$3";
    quarry db:service:get $STACK $SERVICE id
    ;;

  db:service:get)
    STACK="$2";
    SERVICE="$3";
    FILE="$4";

    DB_DIR="$QUARRY_ROOT/$STACK/db"
    FULLPATH="$DB_DIR/service/$SERVICE/$FILE"

    if [[ -f $FULLPATH ]]; then
      cat $FULLPATH
    else
      echo ""
    fi
    ;;

  db:service:set)
    STACK="$2";
    SERVICE="$3";
    FILE="$4";
    VALUE="$5";

    DB_DIR="$QUARRY_ROOT/$STACK/db"
    FOLDER="$DB_DIR/service/$SERVICE"
    FULLPATH="$FOLDER/$FILE"

    mkdir -p $FOLDER
  
    echo $VALUE > $FULLPATH
    ;;

  db:worker:id)
    STACK="$2";
    SERVICE="$3";
    quarry db:service:get $STACK $SERVICE id
    ;;

  db:worker:get)
    STACK="$2";
    WORKER="$3";
    FILE="$4";

    DB_DIR="$QUARRY_ROOT/$STACK/db"
    FULLPATH="$DB_DIR/worker/$WORKER/$FILE"

    if [[ -f $FULLPATH ]]; then
      cat $FULLPATH
    else
      echo ""
    fi
    ;;

  db:worker:set)
    STACK="$2";
    WORKER="$3";
    FILE="$4";
    VALUE="$5";

    DB_DIR="$QUARRY_ROOT/$STACK/db"
    FOLDER="$DB_DIR/worker/$WORKER"
    FULLPATH="$FOLDER/$FILE"

    mkdir -p $FOLDER
  
    echo $VALUE > $FULLPATH
    ;;

  #
  #
  #
  # env
  #
  #
  #

  env)
    STACK="$2";

    if [[ -z $STACK ]]; then
      echo "usage: quarry env <stackname>";
      exit 1;
    fi

    folder=$(mktemp -d)

    mkdir -p $QUARRY_ROOT/env

    for envfile in $(find $QUARRY_ROOT/env -type f); do
      cp -f $envfile $folder
    done

    if [[ ! -z $STACK ]]; then
      for envfile in $(find $QUARRY_ROOT/$STACK/env -type f); do
        cp -f $envfile $folder
      done
    fi

    env=""
    for envfile in $folder/* ; do
      envname=$(echo $envfile | awk -F/ '{print $(NF)}')
      envvalue=$(cat $envfile)
      echo "$envname=$envvalue"
    done
    rm -rf $folder
    ;;


  env:cmd)
    STACK="$2";

    folder=$(mktemp -d)

    mkdir -p $QUARRY_ROOT/env

    for envfile in $(find $QUARRY_ROOT/env -type f); do
      cp -f $envfile $folder
    done

    if [[ ! -z $STACK ]]; then
      for envfile in $(find $QUARRY_ROOT/$STACK/env -type f); do
        cp -f $envfile $folder
      done
    fi

    env=""
    for envfile in $folder/* ; do
      envname=$(echo $envfile | awk -F/ '{print $(NF)}')
      envvalue=$(cat $envfile)
      env="$env $envname=$envvalue"
    done
    rm -rf $folder
    echo $env
    ;;

  env:docker)
    STACK="$2";

    folder=$(mktemp -d)

    mkdir -p $QUARRY_ROOT/env

    for envfile in $(find $QUARRY_ROOT/env -type f); do
      cp -f $envfile $folder
    done

    if [[ ! -z $STACK ]]; then
      for envfile in $(find $QUARRY_ROOT/$STACK/env -type f); do
        cp -f $envfile $folder
      done
    fi

    env=""
    for envfile in $folder/* ; do
      envname=$(echo $envfile | awk -F/ '{print $(NF)}')
      envvalue=$(cat $envfile)
      env="$env -e $envname=$envvalue"
    done
    rm -rf $folder
    echo "$env"
    ;;

  env:writenode)
    STACK="$2";
    basename="$3";
    host="$4";
    port="$5";
    global="$6";

    quarry env:stack:set $STACK ${basename}_TCP tcp://$host:$port
    quarry env:stack:set $STACK ${basename}_TCP_PROTO tcp
    quarry env:stack:set $STACK ${basename}_TCP_ADDR $host
    quarry env:stack:set $STACK ${basename}_TCP_PORT $port
    
    if [[ ! -z $global ]]; then
      quarry env:global:set ${basename}_TCP tcp://$host:$port
      quarry env:global:set ${basename}_TCP_PROTO tcp
      quarry env:global:set ${basename}_TCP_ADDR $host
      quarry env:global:set ${basename}_TCP_PORT $port
    fi
    ;;

  env:stack:set)
    STACK="$2";
    NAME="$3";
    VALUE="$4";

    ENV_DIR="$QUARRY_ROOT/$STACK/env";
    mkdir -p $ENV_DIR
    echo $VALUE > $ENV_DIR/$NAME
    ;;

  env:stack:get)
    STACK="$2";
    NAME="$3";
    ENV_DIR="$QUARRY_ROOT/$STACK/env";
    mkdir -p $ENV_DIR
    if [[ -f $ENV_DIR/$NAME ]]; then
      cat $ENV_DIR/$NAME
    else
      quarry env:global:get $NAME
    fi
    ;;

  # remove a stack env dir
  env:stack:reset)
    STACK="$2";
    ENV_DIR="$QUARRY_ROOT/$STACK/env";
    rm -rf $ENV_DIR
    ;;

  # get the docker command to boot the node
  env:global:set)
    NAME="$2";
    VALUE="$3";

    ENV_DIR="$QUARRY_ROOT/env";
    mkdir -p $ENV_DIR
    echo $VALUE > $ENV_DIR/$NAME
    ;;



  env:global:get)
    NAME="$2";

    ENV_DIR="$QUARRY_ROOT/env";
    mkdir -p $ENV_DIR
    if [[ -f $ENV_DIR/$NAME ]]; then
      cat $ENV_DIR/$NAME
    fi
    ;;

  env:inject)
    STACK="$2"
    RESET="$3"

    if [[ ! -z $RESET ]]; then
      quarry env:stack:reset $STACK
    fi

    while read LINE
    do
      VAR=$(echo $LINE | sed 's/=.*/ /')
      VAL=$(echo $LINE | sed 's/.*=/ /')
      quarry env:stack:set $STACK $VAR $VAL
    done
    ;;

  #
  #
  #
  # stack
  #
  #
  #

  stack:kill)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    # loop over the services and build them
    for servicefolder in $BUILD_DIR/service/* ; do
      servicename=$(echo $servicefolder | awk -F/ '{print $(NF)}')

      id=$(quarry db:service:get $STACK $servicename id)
      
      if [[ ! -z $id ]]; then
        docker kill $id
        docker rm $id
      fi
    done

    quarry stack:kill:workers $STACK
    ;;

  stack:kill:workers)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    # loop over the workers and build them
    for workerfolder in $BUILD_DIR/worker/* ; do
      workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')
      NODE="$STACK$workername"

      id=$(quarry db:worker:get $STACK $workername id)
      domains=$(quarry db:worker:get $STACK $workername domains)
      
      if [[ ! -z $id ]]; then
        docker kill $id || true
        docker rm $id || true
      fi

      if [[ ! -z $domains ]]; then
        nginx-vhost remove $NODE
      fi

    done

    nginx-vhost apply
    ;;

  stack:remove)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    quarry stack:kill $STACK

    rm -rf $STACK_DIR/env/*
    rm -f $STACK_DIR/src.tar
    rm -rf $STACK_DIR/src
    rm -rf $STACK_DIR/build
    rm -rf $STACK_DIR/db
    ;;

  cli)
    STACK="$2";
    IMAGE="$3";

    if [[ -z $IMAGE ]]; then
      echo "usage: quarry cli <stack> <image> <cmd>"
    fi

    shift
    shift
    shift
    cmd=$*
    env=$(quarry env:docker $STACK)
    docker run -i -t $env --entrypoint="/bin/bash" $IMAGE $cmd
    ;;

  mongo:cli)
    STACK="$2";
    host=$(quarry env:stack:get $STACK MONGO_PORT_27017_TCP_ADDR)
    port=$(quarry env:stack:get $STACK MONGO_PORT_27017_TCP_PORT)
    docker run -i -t --entrypoint="/usr/bin/mongo" quarry/mongo --host $host --port $port
    ;;

  mongo:export)
    STACK="$2";
    FOLDER="$3";
    #host=$(quarry env:stack:get $STACK MONGO_PORT_27017_TCP_ADDR)
    #port=$(quarry env:stack:get $STACK MONGO_PORT_27017_TCP_PORT)
    #mkdir -p $FOLDER
    #docker run -i -t -v $FOLDER:/backup --entrypoint="/usr/bin/mongodump" quarry/mongo --host $host --port $port --out /backup
    ;;

  mongo:import)
    STACK="$2";
    FOLDER="$3";
    #host=$(quarry env:stack:get $STACK MONGO_PORT_27017_TCP_ADDR)
    #port=$(quarry env:stack:get $STACK MONGO_PORT_27017_TCP_PORT)
    #docker run -i -t -v $FOLDER:/backup --entrypoint="/usr/bin/mongorestore" quarry/mongo --host $host --port $port /backup
    ;;

  redis:cli)
    STACK="$2";
    docker run -i -t -rm -link $STACK-service-redis:redis relateiq/redis-cli
    ;;

  redis:export)
    STACK="$2";
    FILE="$3";
    #VOLUME_DIR="$QUARRY_ROOT/volumes/$STACK/service/redis/data/db"
    #cat $VOLUME_DIR/dump.rdb | docker run -i quarry/rdb-parser > $FILE
    ;;

  redis:import)
    STACK="$2";
    FILE="$3";
    #host=$(quarry env:stack:get $STACK REDIS_PORT_6379_TCP_ADDR)
    #port=$(quarry env:stack:get $STACK REDIS_PORT_6379_TCP_PORT)
    #(cat $FILE; sleep 10) | nc $host $port > /dev/null
    ;;

  etcd:cli)

    ;;

  etcd:export)

    ;;

  etcd:import)

    ;;

  etcd:start)

    ;;

  yoda)
    STACK="$2";
    shift
    shift
    cmd=$*
    YODA_HOST=`quarry env:stack:get $STACK ETCD_PORT_4001_TCP_ADDR` \
    YODA_PORT=`quarry env:stack:get $STACK ETCD_PORT_4001_TCP_PORT` \
    yoda $cmd
    ;;

  update)
    docker pull coreos/etcd
    docker pull quarry/monnode
    ;;
    

  # get the services booted, bring the workers down and stop nginx and export NODE_ENV
  developer)
    STACK="$2"
    if [[ -z $STACK ]]; then
      echo "usage: quarry developer <stackname>";
      exit 1;
    fi
    shift
    shift
    cmd=$*
    quarry stack:kill:workers $STACK
    quarry deploy:services $STACK
    export NODE_ENV=development
    
    echo "sudo \`quarry env:cmd $STACK\` $cmd"
    ;;

  # start nginx and export NODE_ENV
  production)
    export NODE_ENV=production
    sudo service nginx start
    ;;

  git-hook)
    APP=$2
    while read oldrev newrev refname
    do
      # Only run this script for the master branch. You can remove this
      # if block if you wish to run it for others as well.
      if [[ $refname = "refs/heads/master" ]] ; then
        git archive $newrev | quarry receive $APP | sed -u "s/^/"$'\e[1G'"/"
      fi

    done
    ;;

  git-*)
    APP="$(echo $2 | perl -pe 's/(?<!\\)'\''//g' | sed 's/\\'\''/'\''/g')"
    APP_PATH=$QUARRY_ROOT/$APP

    if [[ $1 == "git-receive-pack" && ! -d $APP_PATH ]]; then
        git init --bare $APP_PATH > /dev/null
        PRERECEIVE_HOOK="$APP_PATH/hooks/pre-receive"
        cat > $PRERECEIVE_HOOK <<EOF
#!/usr/bin/env bash
set -e; set -o pipefail;
cat | QUARRY_ROOT="$QUARRY_ROOT" quarry git-hook $APP
EOF
        chmod +x $PRERECEIVE_HOOK
    fi

    args=$@
    git-shell -c "$args"
    ;;

  help)
    echo
    cat<<EOF | sort
    help                                         Print the list of commands
    developer <stack>                            Expose service ports onto 127.0.0.1
    production <stack>                           Expose service ports onto 127.0.0.1
    stack:kill <stack>                           Kill a stack
    stack:remove <stack>                         Kill and remove a stack
    cli <stack> <image> <cmd>                    Run a command with $stack env in image
    mongo:cli <stack>                            Connect to the mongo service for a stack
    mongo:export <stack> <folder>                Export the mongo database for a stack to a folder
    mongo:import <stack> <folder>                Import the mongo database for a stack from a folder
    redis:cli <stack>                            Connect to the redis service for a stack
    redis:export <stack> <file>                  Export the redis database for a stack to a folder
    redis:import <stack> <file>                  Import the redis database for a stack from a folder
EOF
    echo
    ;;

  *)
    quarry help
    ;;

esac