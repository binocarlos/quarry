#!/bin/bash
set -e
export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/quarry/plugins"}
export QUARRY_APPS=${QUARRY_APPS:="/home/quarry"}

function generate_port()
{
  RANDOM_PORT=`shuf -i 2000-65000 -n 1`;
  if [[ -n `netstat -ant | grep :$RANDOM_PORT` ]]; then
    generate_port
  fi
}

case "$1" in
  receive)
    APP="$2"; IMAGE="app/$APP"
    #echo "-----> Building $APP ..."
    #cat | quarry build $IMAGE
    #echo "-----> Build complete!"
    #echo "-----> Releasing $APP ..."
    #quarry release $APP $IMAGE
    #echo "-----> Release complete!"
    #echo "-----> Deploying $APP ..."
    #quarry deploy $APP $IMAGE
    #echo "-----> Deploy complete!"
    #echo "-----> Cleaning up ..."
    #quarry cleanup
    #echo "-----> Cleanup complete!"
    #echo "=====> Application deployed:"
    #echo "       $(quarry url $APP)"
    #echo
    ;;

  build)
    IMAGE="$2"
    #id=$(cat | docker run -i -a stdin quarry/builder /bin/bash -c "mkdir -p /app && tar -xC /app")
    #test $(docker wait $id) -eq 0
    #docker commit $id $IMAGE > /dev/null
    #id=$(docker run -d $IMAGE /build/builder)
    #docker attach $id
    #test $(docker wait $id) -eq 0
    #docker commit $id $IMAGE > /dev/null
    ;;

  release)
    APP="$2"; IMAGE="$3"
    #pluginhook pre-release $APP $IMAGE
    #if [[ -f "$HOME/$APP/ENV" ]]; then
    #  id=$(cat "$HOME/$APP/ENV" | docker run -i -a stdin $IMAGE /bin/bash -c "mkdir -p /app/.profile.d && cat > /app/.profile.d/app-env.sh")
    #  test $(docker wait $id) -eq 0
    #  docker commit $id $IMAGE > /dev/null
    #fi
    #pluginhook post-release $APP $IMAGE
    ;;

  ensureapp)
    APP="$2";

    if [[ ! -f "$QUARRY_APPS/$APP" ]]; then
      mkdir -p "$QUARRY_APPS/$APP/pids"
      mkdir -p "$QUARRY_APPS/$APP/logs"
      mkdir -p "$QUARRY_APPS/$APP/env"
      mkdir -p "$QUARRY_APPS/$APP/disk"

      folders=( services nodes disks )
      for IMAGE in "${QUARRYFILES_IMAGES[@]}"
      do
        install_image $IMAGE
      done
    fi
    ;;

  service)
    APP="$2"; TYPE="$3"
    quarry ensureapp $APP
    ;;

  deploy)
    APP="$2"; IMAGE="$3"
    #pluginhook pre-deploy $APP $IMAGE
    #if [[ ! -f "$HOME/$APP/PORT" ]]; then
    #  # First deploy
    #  id=$(docker run -d -p 5000 -e PORT=5000 $IMAGE /bin/bash -c "/start web")
    #  echo $id > "$HOME/$APP/CONTAINER"
    #  port=$(docker port $id 5000)
    #  echo $port > "$HOME/$APP/PORT"
    #  echo "$(< "$HOME/HOSTNAME"):$port" > "$HOME/$APP/ADDRESS"
    #else
      # Regular deploy
    #  oldid=$(< "$HOME/$APP/CONTAINER")
    #  docker kill $oldid > /dev/null
    #  port=$(< "$HOME/$APP/PORT")
    #  id=$(docker run -d -p ":$port" -e "PORT=$port" $IMAGE /bin/bash -c "/start web")
    #  echo $id > "$HOME/$APP/CONTAINER"
    #fi
    #pluginhook post-deploy $APP $port
    ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    # delete quarry images
    docker images | grep 'quarry/' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    # remove the image cache
    rm -rf ~/quarryfiles
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    pluginhook install
    ;;

  # temporary hack for https://github.com/progrium/dokku/issues/82
  deploy:all)
    for app in $(ls -d $HOME/*/); do
      APP=$(basename $app);
      IMAGE="app/$APP"
      dokku deploy $APP $IMAGE
    done
    ;;

  help)
    cat<<EOF | pluginhook commands help | sort
    help            Print the list of commands
    plugins         Print active plugins
    plugins-install Install active plugins
EOF
    ;;

  port)
    generate_port
    echo $RANDOM_PORT
    ;;    

  *)
    pluginhook commands "$@"
    ;;

esac
