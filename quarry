#!/usr/bin/env bash
set -eo pipefail
export QUARRY_ROOT=${QUARRY_ROOT:="/home/quarry"}
export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/quarry/plugins"}

[[ -f $QUARRY_ROOT/quarryrc ]] && source $QUARRY_ROOT/quarryrc

[[ $QUARRY_TRACE ]] && set -x

if [[ $(id -un) != "quarry" && $1 != "plugins-install" ]]; then
  sudo -u quarry -H $0 "$@"
  exit
fi

case "$1" in
  receive)
    APP="$2"; IMAGE="app/$APP"
    echo "-----> Cleaning up ..."
    quarry cleanup
    echo "-----> Building $APP ..."
    cat | quarry build $APP
    echo "-----> Releasing $APP ..."
    quarry release $APP
    echo "-----> Deploying $APP ..."
    quarry deploy $APP
    echo "=====> Stack deployed:"
    echo "       $(quarry url $APP)"
    echo
    ;;

  build)
    APP="$2"; IMAGE="app/$APP"; CACHE_DIR="$QUARRY_ROOT/$APP/cache"
    id=$(cat | docker run -i -a stdin quarry/base /bin/bash -c "mkdir -p /app && tar -xC /app")
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    [[ -d $CACHE_DIR ]] || mkdir $CACHE_DIR
    pluginhook pre-build $APP
    id=$(docker run -d -v $CACHE_DIR:/cache $IMAGE /build/builder)
    docker attach $id
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    pluginhook post-build $APP
    ;;

  release)
    APP="$2"; IMAGE="app/$APP"
    pluginhook pre-release $APP
    if [[ -f "$DOKKU_ROOT/$APP/ENV" ]]; then
      id=$(cat "$DOKKU_ROOT/$APP/ENV" | docker run -i -a stdin $IMAGE /bin/bash -c "mkdir -p /app/.profile.d && cat > /app/.profile.d/app-env.sh")
      test $(docker wait $id) -eq 0
      docker commit $id $IMAGE > /dev/null
    fi
    pluginhook post-release $APP
    ;;

  deploy)
    APP="$2"; IMAGE="app/$APP"
    pluginhook pre-deploy $APP

    # kill the app when running
    if [[ -f "$DOKKU_ROOT/$APP/CONTAINER" ]]; then
      oldid=$(< "$DOKKU_ROOT/$APP/CONTAINER")
      docker kill $oldid > /dev/null 2>&1 || true
    fi

    # start the app
    DOCKER_ARGS=$(: | pluginhook docker-args $APP)
    id=$(docker run -d -p 5000 -e PORT=5000 $DOCKER_ARGS $IMAGE /bin/bash -c "/start web")
    echo $id > "$DOKKU_ROOT/$APP/CONTAINER"
    port=$(docker port $id 5000 | sed 's/0.0.0.0://')
    echo $port > "$DOKKU_ROOT/$APP/PORT"
    echo "http://$(< "$DOKKU_ROOT/HOSTNAME"):$port" > "$DOKKU_ROOT/$APP/URL"

    pluginhook post-deploy $APP $port
    ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    pluginhook install
    ;;

  # temporary hack for https://github.com/progrium/dokku/issues/82
  deploy:all)
    for app in $(ls -d $DOKKU_ROOT/*/); do
      APP=$(basename $app);
      dokku deploy $APP
    done
    ;;

  help)
    cat<<EOF | pluginhook commands help | sort
    help            Print the list of commands
    plugins         Print active plugins
    plugins-install Install active plugins
EOF
    ;;

  *)
    for script in $(ls -d /var/lib/dokku/plugins/*/commands); do
      $script "$@"
    done
    ;;

esac
