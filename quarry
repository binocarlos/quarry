#!/usr/bin/env bash
set -eo pipefail
export QUARRY_ROOT=${QUARRY_ROOT:="/home/quarry"}
export DATA_ROOT=${QUARRY_ROOT:="/var/lib/quarry/data"}
export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/quarry/plugins"}

[[ -f $QUARRY_ROOT/quarryrc ]] && source $QUARRY_ROOT/quarryrc

[[ $QUARRY_TRACE ]] && set -x

if [[ $(id -un) != "quarry" && $1 != "plugins-install" ]]; then
  sudo -u quarry -H $0 "$@"
  exit
fi

case "$1" in
  receive)
    APP="$2"; IMAGE="app/$APP"
    echo "-----> Cleaning up ..."
    quarry cleanup
    echo "-----> Building $APP ..."
    cat | quarry build $APP
    echo
    ;;

  build)
    APP="$2"; IMAGE="app/$APP"; APP_DIR="$QUARRY_ROOT/$APP";
    # incoming tar stream -> /home/quarry/appname/src.tar
    rm -rf $APP_DIR/src && mkdir -p $APP_DIR/src
    cat > $APP_DIR/src.tar
    cat $APP_DIR/src.tar | tar -xC $APP_DIR/src
    #tar -xf $APP_DIR/src.tar
    #id=$(cat $SRC_DIR.tar | docker run -i -a stdin quarry/base /bin/bash -c "mkdir -p /app && tar -xC /app")
    #test $(docker wait $id) -eq 0
    #docker commit $id $IMAGE > /dev/null
    #[[ -d $BUILD_DIR ]] || mkdir $BUILD_DIR
    #pluginhook pre-build $APP
    #rm -rf $BUILD_DIR/app
    #docker cp $id:/app $BUILD_DIR
    #id=$(docker run -d -v $BUILD_DIR:/build $IMAGE node /opt/quarry/bin/quarry-cli build $APP /build/app /build)
    #docker attach $id
    #test $(docker wait $id) -eq 0
    #docker commit $id $IMAGE > /dev/null
    #pluginhook post-build $APP
    ;;

  service)
    NAME="$2";
    case "$NAME" in
      etcd)
        running=$(docker ps | grep etcd | awk '{ print $1 }')
        if [[ -z $running ]]; then
          docker run -name "etcd" -d -p 4001:4001 -p 7001:7001 quarry/etcd
        fi
      ;;
      registry)
        running=$(docker ps | grep registry | awk '{ print $1 }')
        if [[ -z $running ]]; then
          docker run -name "registry" -d -p 5000:5000 samalba/docker-registry 
        fi
      ;;
    esac
    ;;

  testbuild)
    APP="$2";
    SOURCE_FOLDER=`pwd`
    tar --exclude=.git -c . | quarry build $APP
    ;;

  core)
    SERVICE="$2";
    id=$(docker ps )

    ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    pluginhook install
    ;;

  help)
    cat<<EOF | pluginhook commands help | sort
    help            Print the list of commands
    plugins         Print active plugins
    plugins-install Install active plugins
EOF
    ;;

  *)
    for script in $(ls -d /var/lib/quarry/plugins/*/commands); do
      $script "$@"
    done
    ;;

esac
