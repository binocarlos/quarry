#!/usr/bin/env bash
set -eo pipefail; [[ $QUARRY_TRACE ]] && set -x

case "$1" in

  deploy)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    echo "deploy $STACK"

    quarry db:snapshot $STACK

    pluginhook pre-deploy $STACK

    # loop over the services and build them
    for servicefolder in $BUILD_DIR/service/* ; do
      servicename=$(echo $servicefolder | awk -F/ '{print $(NF)}')
      
      quarry deploy:service $STACK $servicename
    done

    # loop over the workers and build them
    for workerfolder in $BUILD_DIR/worker/* ; do
      workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')
      
      quarry deploy:worker $STACK $workername
    done

    nginx-vhost apply

    quarry deploy:cleanup $STACK

    pluginhook post-deploy $STACK

    echo
    echo "$STACK deployed"
    echo
    ;;

  # kill the containers from the old stack
  deploy:cleanup)
    STACK="$2";
    DB_DIR="$QUARRY_ROOT/$STACK/db"

    echo "cleanup $STACK"

    if [[ -d "$DB_DIR/previous" ]]; then
      for workerfolder in $DB_DIR/previous/* ; do
        workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')
        if [[ -f $workerfolder/id ]]; then
          previouscontainer=`cat $workerfolder/id`
          echo "kill $workername $previouscontainer"
          id=$(docker kill $previouscontainer || true)
        fi
      done
    fi
    
    ;;

  deploy:worker)
    STACK="$2";
    WORKER="$3";

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/worker/$WORKER";

    NODE="$STACK$WORKER"

    echo
    echo "deploy $STACK $WORKER"

    # boot the docker container for the worker
    if [[ -f $BUILD_DIR/container ]]; then
      container=$(cat $BUILD_DIR/container)

      port_opts=$(quarry deploy:port_opts $STACK worker/$WORKER);
      volume_opts=$(quarry deploy:volume_opts $STACK worker/$WORKER);
      env=$(quarry env:docker $STACK)

      # BOOT SERVICE HERE
      cid=$(docker run -d -t $port_opts $volume_opts $env $container)

      # write the container
      quarry db:worker:set $STACK $WORKER id $cid
      quarry db:worker:set $STACK $WORKER container $container
      quarry db:worker:set $STACK $WORKER port_opts "$port_opts"
      quarry db:worker:set $STACK $WORKER volume_opts "$volume_opts"
      quarry db:worker:set $STACK $WORKER env "$env"

      echo "$WORKER booted"
      #echo "          $opts"
      #echo "          $env"
    fi

    # hook up the nginx-vhost with the domains
    if [[ -f $BUILD_DIR/domains ]]; then

      domains=`cat $BUILD_DIR/domains`
      quarry db:worker:set $STACK $WORKER domains "$domains"

      echo "    domains $domains"
      nginx-vhost domains $NODE $domains

      # this is a static node
      if [[ -f $BUILD_DIR/document_root ]]; then
        root=`cat $BUILD_DIR/document_root`
        echo "    document_root $root"
        nginx-vhost document_root $NODE $STACK_DIR/src/$root
      else
        host=$QUARRY_HOST
        port=$(docker port $cid 80 | sed 's/^.*\://' || echo)
        echo "    backends $NODE $host:$port"
        nginx-vhost backends $NODE $host:$port
      fi

    fi

    echo

    ;;

  deploy:service)
    STACK="$2";
    SERVICE="$3";

    echo
    echo "deploy $STACK $SERVICE"

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/service/$SERVICE";

    nodename="$STACK-service-$SERVICE"
    container=$(cat $BUILD_DIR/container)

    running=$(docker ps | grep "$nodename" | awk '{ print $1 }' || echo)
    cid=$(quarry db:service:get $STACK $SERVICE id)

    # this means the service is not running
    if [[ -z $running ]]; then

      # this means we have never run it
      if [[ -z $cid ]]; then
        
        port_opts=$(quarry deploy:port_opts $STACK service/$SERVICE);
        volume_opts=$(quarry deploy:volume_opts $STACK service/$SERVICE);

        docker rm $nodename || true
        # BOOT SERVICE HERE
        cid=$(docker run -d -t -name $nodename $port_opts $volume_opts $container)

        # write the container
        quarry db:service:set $STACK $SERVICE id $cid
        quarry db:service:set $STACK $SERVICE name $nodename
        quarry db:service:set $STACK $SERVICE container $container
        quarry db:service:set $STACK $SERVICE port_opts "$port_opts"
        quarry db:service:set $STACK $SERVICE volume_opts "$volume_opts"

        echo "$SERVICE booted"

      else
        echo "$SERVICE restarting"
        docker start $cid
      fi

    # this means the service is already running
    else

      echo "$SERVICE already running" 

    fi

    quarry deploy:write_service_env $STACK $SERVICE

    echo
    ;;

  # get the env vars from a service node
  # write them to the stack env
  deploy:write_service_env)
    STACK="$2";
    SERVICE="$3";
    NAME=$(echo $SERVICE | sed 's/^.*\///' | awk '{print toupper($0)}')

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/service/$SERVICE";

    host=$QUARRY_HOST

    cid=$(quarry db:service:get $STACK $SERVICE id)

    # PORTS
    if [[ -f "$BUILD_DIR/expose" ]]; then
      ports=`cat $BUILD_DIR/expose`

      for port in "${ports[@]}"
      do
      
        container_port=$(echo $port | sed 's/^.*\://')
        public_port=$(docker port $cid $container_port | sed 's/^.*\://')

        basename="${NAME}_PORT_${container_port}"
        quarry env:writenode $STACK $basename $host $public_port

      done
    fi
    ;;

  # generate the docker run options for a node
  # volumes and ports
  deploy:port_opts)
    STACK="$2";
    NODE="$3";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    NODE_DIR="$STACK_DIR/build/$NODE";

    opts=""

    # PORTS
    if [[ -f "$NODE_DIR/expose" ]]; then
      ports=`cat $NODE_DIR/expose`
      for port in "${ports[@]}"
      do
        opts="$opts -p $port"
      done
    fi

    echo $opts
    ;;

  deploy:volume_opts)
    STACK="$2";
    NODE="$3";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    VOLUME_DIR="$QUARRY_ROOT/volumes/$STACK/$NODE"
    NODE_DIR="$STACK_DIR/build/$NODE";

    opts=""

    # VOLUMES
    if [[ -f "$NODE_DIR/volumes" ]]; then
      volumes=`cat $NODE_DIR/volumes`
      for volume in "${volumes[@]}"
      do
        hostvolume="$VOLUME_DIR$volume";
        mkdir -p $hostvolume
        #echo "volume: $hostvolume:$volume"
        opts="$opts -v $hostvolume:$volume"
      done
    fi

    echo $opts
    ;;

  deploy:kill)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    pluginhook pre-kill $STACK

    # loop over the services and build them
    for servicefolder in $BUILD_DIR/service/* ; do
      servicename=$(echo $servicefolder | awk -F/ '{print $(NF)}')

      id=$(quarry db:service:get $STACK $servicename id)
      
      if [[ ! -z $id ]]; then
        docker kill $id
      fi
    done

    # loop over the workers and build them
    for workerfolder in $BUILD_DIR/worker/* ; do
      workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')
      NODE="$STACK$workername"

      id=$(quarry db:worker:get $STACK $workername id)
      domains=$(quarry db:worker:get $STACK $workername domains)
      
      if [[ ! -z $id ]]; then
        docker kill $id
      fi

      if [[ ! -z $domains ]]; then
        nginx-vhost remove $NODE
      fi

    done

    nginx-vhost apply
    ;;

  deploy:remove)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    quarry deploy:kill $STACK

    rm -rf $STACK_DIR
    ;;

  help)
    cat
    ;;

esac