#!/usr/bin/env bash
set -eo pipefail; [[ $QUARRY_TRACE ]] && set -x

case "$1" in

  deploy)
    STACK="$2";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build";

    quarry db:snapshot $STACK

    pluginhook pre-deploy $STACK

    # loop over the services and build them
    for servicefolder in $BUILD_DIR/service/* ; do
      servicename=$(echo $servicefolder | awk -F/ '{print $(NF)}')
      quarry deploy:service $STACK $servicename
    done

    # loop over the workers and build them
    for workerfolder in $BUILD_DIR/worker/* ; do
      workername=$(echo $workerfolder | awk -F/ '{print $(NF)}')
      quarry deploy:worker $STACK $workername
    done

    pluginhook post-deploy $STACK
    ;;

  # kill the containers from the old stack
  deploy:cleanup)
    echo "KILL OLD STACK"
    ;;

  deploy:worker)
    STACK="$2";
    WORKER="$3";

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/worker/$WORKER";

    ;;

  deploy:service)
    STACK="$2";
    SERVICE="$3";

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/service/$SERVICE";

    nodename="$STACK-service-$SERVICE"
    container=$(cat $BUILD_DIR/container)

    running=$(docker ps | grep "$nodename" | awk '{ print $1 }' || echo)
    cid=$(quarry db:service:get $STACK $SERVICE id)

    echo "    -----> Init Service $SERVICE - $container $cid ..."

    # this means the service is not running
    if [[ -z $running ]]; then

      # this means we have never run it
      if [[ -z $cid ]]; then
        
        opts=$(quarry deploy:generate_opts $STACK service/$SERVICE);

        docker rm $nodename || true
        # BOOT SERVICE HERE
        cid=$(docker run -d -t -name $nodename $opts $container)

        # write the container
        quarry db:service:set $STACK $SERVICE id $cid
        quarry db:service:set $STACK $SERVICE name $nodename
        quarry db:service:set $STACK $SERVICE container $container
        quarry db:service:set $STACK $SERVICE opts "$opts"

        echo "$SERVICE booted - $cid"
        echo "          $opts"

      else
        echo "$SERVICE restarting - $cid"
        docker start $cid
      fi

    # this means the service is already running
    else

      echo "$SERVICE already running - $cid" 

    fi

    quarry deploy:write_service_env $STACK $SERVICE
    ;;

  # get the env vars from a service node
  # write them to the stack env
  deploy:write_service_env)
    STACK="$2";
    SERVICE="$3";
    NAME=$(echo $SERVICE | sed 's/^.*\///' | awk '{print toupper($0)}')

    STACK_DIR="$QUARRY_ROOT/$STACK";
    BUILD_DIR="$STACK_DIR/build/service/$SERVICE";

    host=$QUARRY_HOST

    cid=$(quarry db:service:get $STACK $SERVICE id)

    # PORTS
    if [[ -f "$BUILD_DIR/expose" ]]; then
      ports=`cat $BUILD_DIR/expose`
      for port in "${ports[@]}"
      do
        
        container_port=$(echo $port | sed 's/^.*\://')
        public_port=$(docker port $cid $container_port | sed 's/^.*\://')

        basename="${NAME}_PORT_${container_port}"
        # if a node has the global setting then it is exported to all workers
        global=$(quarry db:build:setting $STACK service/$SERVICE global)

        quarry env:writenode $STACK $basename $host $public_port $global
        
      done
    fi
    ;;

  # generate the docker run options for a node
  # volumes and ports
  deploy:generate_opts)
    STACK="$2";
    NODE="$3";
    STACK_DIR="$QUARRY_ROOT/$STACK";
    NODE_DIR="$STACK_DIR/build/$NODE";

    opts=""

    # PORTS
    if [[ -f "$NODE_DIR/expose" ]]; then
      ports=`cat $NODE_DIR/expose`
      for port in "${ports[@]}"
      do
        opts="$opts -p $port"
      done
    fi

    # VOLUMES
    if [[ -f "$NODE_DIR/volumes" ]]; then
      volumes=`cat $NODE_DIR/volumes`
      DATA_DIR="$STACK_DIR/volumes/$NODE";
      mkdir -p $DATA_DIR
      for volume in "${volumes[@]}"
      do
        hostvolume="$DATA_DIR$volume";
        mkdir -p $hostvolume
        #echo "volume: $hostvolume:$volume"
        opts="$opts -v $hostvolume:$volume"
      done
    fi

    echo $opts
    ;;


  help)
    cat
    ;;

esac
